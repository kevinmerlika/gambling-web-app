// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  balance   Float    @default(0)
  chips     Int      @default(0)
  createdAt DateTime @default(now())
  Players   Player[]
  Transaction     Transaction[]

}


model Lobby {
  id        Int      @id @default(autoincrement())
  name      String
  status    String   @default("waiting")  // 'waiting', 'started', 'finished'
  createdAt DateTime @default(now())
  Players   Player[]
  Games     Game[]
   // Foreign key to Game
  gameId    Int
  game      Games     @relation(fields: [gameId], references: [id], name: "GameLobbies")
  
}

model Player {
  id        Int      @id @default(autoincrement())
  userId    Int
  lobbyId   Int
  username  String
  balance   Float    @default(0)
  status    String   @default("waiting") // 'waiting', 'playing', 'folded', 'busted'
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  lobby     Lobby    @relation(fields: [lobbyId], references: [id])
  Bets      Bet[]
  Cards     Card[]
  Games     Game[]   @relation("GamePlayers") // Relation field for games a player participates in
  History   GameHistory[]
}

model Game {
  id          Int       @id @default(autoincrement())
  lobbyId     Int
  currentRound Int      @default(1)
  status      String   @default("waiting")  // 'waiting', 'in-progress', 'completed'
  currentTurn Int?     // Player ID of the current turn
  startedAt   DateTime @default(now())
  finishedAt  DateTime?
  Players     Player[] @relation("GamePlayers") // Relation to Player model, needs to match on Player side
  Cards       Card[]
  Bets        Bet[]
  History     GameHistory[]
  lobby       Lobby    @relation(fields: [lobbyId], references: [id])
}


model GameHistory {
  id        Int      @id @default(autoincrement())
  gameId    Int
  playerId  Int
  handResult String
  winnings  Float    @default(0)
  finishedAt DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model Card {
  id        Int      @id @default(autoincrement())
  gameId    Int
  playerId  Int?
  cardValue String
  cardType  String   @default("community")  // 'community', 'private'
  dealtAt   DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  player    Player?  @relation(fields: [playerId], references: [id])
}

model Bet {
  id        Int      @id @default(autoincrement())
  gameId    Int
  playerId  Int
  amount    Float
  round     Int
  betTime   DateTime @default(now())
  game      Game     @relation(fields: [gameId], references: [id])
  player    Player   @relation(fields: [playerId], references: [id])
}

model Games {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  description String?
  image       String?
  url         String?
  createdAt   DateTime @default(now())
    lobbies     Lobby[]  @relation("GameLobbies")

}

model Transaction {
  id            Int       @id @default(autoincrement())
  transactionId String    @unique
  total         Float
  type          String
  status        String
  currency      String
  referenceLink String
  date          DateTime
  userId        Int
  user          User      @relation(fields: [userId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

